# -*- coding: utf-8 -*-
"""Breast_Cancer_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xK_wt6NwTegmD0GeibXnqHtcUpT7bg_s
"""

import pandas as pd
import numpy as np

from google.colab import files
up=files.upload()

import pandas as pd


df = pd.read_csv("data (1).csv")

# Display basic information and first few rows
df.info(), df.head()

from sklearn.preprocessing import LabelEncoder, StandardScaler

# Drop unnecessary columns
df_cleaned = df.drop(columns=['id', 'Unnamed: 32'])

# Encode the 'diagnosis' column: M = 1 (malignant), B = 0 (benign)
df_cleaned['diagnosis'] = LabelEncoder().fit_transform(df_cleaned['diagnosis'])

# Split features and target
X = df_cleaned.drop(columns='diagnosis')
y = df_cleaned['diagnosis']

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Show shape and a preview of the processed data
X.shape, y.shape, X_scaled[:5]

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Initialize the models
models = {
    "SVM": SVC(kernel='linear', probability=True, random_state=42),
    "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
    "k-NN": KNeighborsClassifier(n_neighbors=5)
}

# Train and evaluate each model
results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True)
    results[name] = {"accuracy": acc, "confusion_matrix": cm, "classification_report": report}

results

